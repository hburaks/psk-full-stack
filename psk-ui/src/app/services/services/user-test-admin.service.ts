/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {assignTest, AssignTest$Params} from '../fn/user-test-admin/assign-test';
import {deleteUserTest, DeleteUserTest$Params} from '../fn/user-test-admin/delete-user-test';
import {getAllUserTests, GetAllUserTests$Params} from '../fn/user-test-admin/get-all-user-tests';
import {getUserTestAnswers, GetUserTestAnswers$Params} from '../fn/user-test-admin/get-user-test-answers';
import {UserAnswerResponse} from '../models/user-answer-response';
import {UserTestListResponse} from '../models/user-test-list-response';
import {UserTestResponse} from '../models/user-test-response';


/**
 * Admin endpoints for test assignment and management
 */
@Injectable({ providedIn: 'root' })
export class UserTestAdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `assignTest()` */
  static readonly AssignTestPath = '/v2/admin/user-tests/assign';

  /**
   * Assign test to user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTest()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTest$Response(params: AssignTest$Params, context?: HttpContext): Observable<StrictHttpResponse<UserTestResponse>> {
    return assignTest(this.http, this.rootUrl, params, context);
  }

  /**
   * Assign test to user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTest$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  assignTest(params: AssignTest$Params, context?: HttpContext): Observable<UserTestResponse> {
    return this.assignTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserTestResponse>): UserTestResponse => r.body)
    );
  }

  /** Path part for operation `getAllUserTests()` */
  static readonly GetAllUserTestsPath = '/v2/admin/user-tests';

  /**
   * Get all user tests.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUserTests()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserTests$Response(params?: GetAllUserTests$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserTestListResponse>>> {
    return getAllUserTests(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all user tests.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUserTests$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUserTests(params?: GetAllUserTests$Params, context?: HttpContext): Observable<Array<UserTestListResponse>> {
    return this.getAllUserTests$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserTestListResponse>>): Array<UserTestListResponse> => r.body)
    );
  }

  /** Path part for operation `getUserTestAnswers()` */
  static readonly GetUserTestAnswersPath = '/v2/admin/user-tests/{userTestId}/answers';

  /**
   * Get user's answers for a test (Admin access).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserTestAnswers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTestAnswers$Response(params: GetUserTestAnswers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserAnswerResponse>>> {
    return getUserTestAnswers(this.http, this.rootUrl, params, context);
  }

  /**
   * Get user's answers for a test (Admin access).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserTestAnswers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserTestAnswers(params: GetUserTestAnswers$Params, context?: HttpContext): Observable<Array<UserAnswerResponse>> {
    return this.getUserTestAnswers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserAnswerResponse>>): Array<UserAnswerResponse> => r.body)
    );
  }

  /** Path part for operation `deleteUserTest()` */
  static readonly DeleteUserTestPath = '/v2/admin/user-tests/{userTestId}';

  /**
   * Delete user test.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUserTest()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserTest$Response(params: DeleteUserTest$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUserTest(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete user test.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUserTest$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUserTest(params: DeleteUserTest$Params, context?: HttpContext): Observable<void> {
    return this.deleteUserTest$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}

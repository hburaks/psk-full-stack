/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addNoteToSessionForPsychologistV2 } from '../fn/session-controller-v-2/add-note-to-session-for-psychologist-v-2';
import { AddNoteToSessionForPsychologistV2$Params } from '../fn/session-controller-v-2/add-note-to-session-for-psychologist-v-2';
import { addNoteToSessionForUserV2 } from '../fn/session-controller-v-2/add-note-to-session-for-user-v-2';
import { AddNoteToSessionForUserV2$Params } from '../fn/session-controller-v-2/add-note-to-session-for-user-v-2';
import { createSessionForUserV2 } from '../fn/session-controller-v-2/create-session-for-user-v-2';
import { CreateSessionForUserV2$Params } from '../fn/session-controller-v-2/create-session-for-user-v-2';
import { getAllSessionsOfUserV2 } from '../fn/session-controller-v-2/get-all-sessions-of-user-v-2';
import { GetAllSessionsOfUserV2$Params } from '../fn/session-controller-v-2/get-all-sessions-of-user-v-2';
import { getAllSessionsV2 } from '../fn/session-controller-v-2/get-all-sessions-v-2';
import { GetAllSessionsV2$Params } from '../fn/session-controller-v-2/get-all-sessions-v-2';
import { getAllUsersWithSessionV2 } from '../fn/session-controller-v-2/get-all-users-with-session-v-2';
import { GetAllUsersWithSessionV2$Params } from '../fn/session-controller-v-2/get-all-users-with-session-v-2';
import { getUpcomingSessionsV2 } from '../fn/session-controller-v-2/get-upcoming-sessions-v-2';
import { GetUpcomingSessionsV2$Params } from '../fn/session-controller-v-2/get-upcoming-sessions-v-2';
import { makeAvailableV2 } from '../fn/session-controller-v-2/make-available-v-2';
import { MakeAvailableV2$Params } from '../fn/session-controller-v-2/make-available-v-2';
import { makeUnavailableV2 } from '../fn/session-controller-v-2/make-unavailable-v-2';
import { MakeUnavailableV2$Params } from '../fn/session-controller-v-2/make-unavailable-v-2';
import { PageResponseSessionResponseV2 } from '../models/page-response-session-response-v-2';
import { PageResponseUserWithSessionResponse } from '../models/page-response-user-with-session-response';
import { PublicSessionResponse } from '../models/public-session-response';
import { SessionResponseV2 } from '../models/session-response-v-2';
import { updateSessionDateV2 } from '../fn/session-controller-v-2/update-session-date-v-2';
import { UpdateSessionDateV2$Params } from '../fn/session-controller-v-2/update-session-date-v-2';
import { updateSessionPaidStatusV2 } from '../fn/session-controller-v-2/update-session-paid-status-v-2';
import { UpdateSessionPaidStatusV2$Params } from '../fn/session-controller-v-2/update-session-paid-status-v-2';
import { updateSessionStatusV2 } from '../fn/session-controller-v-2/update-session-status-v-2';
import { UpdateSessionStatusV2$Params } from '../fn/session-controller-v-2/update-session-status-v-2';

@Injectable({ providedIn: 'root' })
export class SessionControllerV2Service extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateSessionStatusV2()` */
  static readonly UpdateSessionStatusV2Path = '/v2/sessions/update-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSessionStatusV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSessionStatusV2$Response(params: UpdateSessionStatusV2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateSessionStatusV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSessionStatusV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSessionStatusV2(params: UpdateSessionStatusV2$Params, context?: HttpContext): Observable<number> {
    return this.updateSessionStatusV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `updateSessionPaidStatusV2()` */
  static readonly UpdateSessionPaidStatusV2Path = '/v2/sessions/update-paid-status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSessionPaidStatusV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSessionPaidStatusV2$Response(params: UpdateSessionPaidStatusV2$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponseV2>> {
    return updateSessionPaidStatusV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSessionPaidStatusV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateSessionPaidStatusV2(params: UpdateSessionPaidStatusV2$Params, context?: HttpContext): Observable<SessionResponseV2> {
    return this.updateSessionPaidStatusV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponseV2>): SessionResponseV2 => r.body)
    );
  }

  /** Path part for operation `updateSessionDateV2()` */
  static readonly UpdateSessionDateV2Path = '/v2/sessions/update-date';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateSessionDateV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSessionDateV2$Response(params: UpdateSessionDateV2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return updateSessionDateV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateSessionDateV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateSessionDateV2(params: UpdateSessionDateV2$Params, context?: HttpContext): Observable<number> {
    return this.updateSessionDateV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `makeUnavailableV2()` */
  static readonly MakeUnavailableV2Path = '/v2/sessions/make-unavailable';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeUnavailableV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeUnavailableV2$Response(params: MakeUnavailableV2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PublicSessionResponse>>> {
    return makeUnavailableV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeUnavailableV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeUnavailableV2(params: MakeUnavailableV2$Params, context?: HttpContext): Observable<Array<PublicSessionResponse>> {
    return this.makeUnavailableV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PublicSessionResponse>>): Array<PublicSessionResponse> => r.body)
    );
  }

  /** Path part for operation `makeAvailableV2()` */
  static readonly MakeAvailableV2Path = '/v2/sessions/make-available';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeAvailableV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeAvailableV2$Response(params: MakeAvailableV2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PublicSessionResponse>>> {
    return makeAvailableV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeAvailableV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeAvailableV2(params: MakeAvailableV2$Params, context?: HttpContext): Observable<Array<PublicSessionResponse>> {
    return this.makeAvailableV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PublicSessionResponse>>): Array<PublicSessionResponse> => r.body)
    );
  }

  /** Path part for operation `createSessionForUserV2()` */
  static readonly CreateSessionForUserV2Path = '/v2/sessions/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSessionForUserV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  createSessionForUserV2$Response(params: CreateSessionForUserV2$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createSessionForUserV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSessionForUserV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createSessionForUserV2(params: CreateSessionForUserV2$Params, context?: HttpContext): Observable<number> {
    return this.createSessionForUserV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `addNoteToSessionForUserV2()` */
  static readonly AddNoteToSessionForUserV2Path = '/v2/sessions/add-note/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNoteToSessionForUserV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNoteToSessionForUserV2$Response(params: AddNoteToSessionForUserV2$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponseV2>> {
    return addNoteToSessionForUserV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNoteToSessionForUserV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNoteToSessionForUserV2(params: AddNoteToSessionForUserV2$Params, context?: HttpContext): Observable<SessionResponseV2> {
    return this.addNoteToSessionForUserV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponseV2>): SessionResponseV2 => r.body)
    );
  }

  /** Path part for operation `addNoteToSessionForPsychologistV2()` */
  static readonly AddNoteToSessionForPsychologistV2Path = '/v2/sessions/add-note/psychologist';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addNoteToSessionForPsychologistV2()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNoteToSessionForPsychologistV2$Response(params: AddNoteToSessionForPsychologistV2$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponseV2>> {
    return addNoteToSessionForPsychologistV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addNoteToSessionForPsychologistV2$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addNoteToSessionForPsychologistV2(params: AddNoteToSessionForPsychologistV2$Params, context?: HttpContext): Observable<SessionResponseV2> {
    return this.addNoteToSessionForPsychologistV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponseV2>): SessionResponseV2 => r.body)
    );
  }

  /** Path part for operation `getAllUsersWithSessionV2()` */
  static readonly GetAllUsersWithSessionV2Path = '/v2/sessions/users-with-sessions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsersWithSessionV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersWithSessionV2$Response(params: GetAllUsersWithSessionV2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseUserWithSessionResponse>> {
    return getAllUsersWithSessionV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsersWithSessionV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsersWithSessionV2(params: GetAllUsersWithSessionV2$Params, context?: HttpContext): Observable<PageResponseUserWithSessionResponse> {
    return this.getAllUsersWithSessionV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseUserWithSessionResponse>): PageResponseUserWithSessionResponse => r.body)
    );
  }

  /** Path part for operation `getAllSessionsOfUserV2()` */
  static readonly GetAllSessionsOfUserV2Path = '/v2/sessions/user/{userId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSessionsOfUserV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsOfUserV2$Response(params: GetAllSessionsOfUserV2$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SessionResponseV2>>> {
    return getAllSessionsOfUserV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSessionsOfUserV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsOfUserV2(params: GetAllSessionsOfUserV2$Params, context?: HttpContext): Observable<Array<SessionResponseV2>> {
    return this.getAllSessionsOfUserV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SessionResponseV2>>): Array<SessionResponseV2> => r.body)
    );
  }

  /** Path part for operation `getUpcomingSessionsV2()` */
  static readonly GetUpcomingSessionsV2Path = '/v2/sessions/upcoming-session';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUpcomingSessionsV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpcomingSessionsV2$Response(params?: GetUpcomingSessionsV2$Params, context?: HttpContext): Observable<StrictHttpResponse<SessionResponseV2>> {
    return getUpcomingSessionsV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUpcomingSessionsV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUpcomingSessionsV2(params?: GetUpcomingSessionsV2$Params, context?: HttpContext): Observable<SessionResponseV2> {
    return this.getUpcomingSessionsV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<SessionResponseV2>): SessionResponseV2 => r.body)
    );
  }

  /** Path part for operation `getAllSessionsV2()` */
  static readonly GetAllSessionsV2Path = '/v2/sessions/all';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSessionsV2()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsV2$Response(params: GetAllSessionsV2$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseSessionResponseV2>> {
    return getAllSessionsV2(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSessionsV2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsV2(params: GetAllSessionsV2$Params, context?: HttpContext): Observable<PageResponseSessionResponseV2> {
    return this.getAllSessionsV2$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseSessionResponseV2>): PageResponseSessionResponseV2 => r.body)
    );
  }

}

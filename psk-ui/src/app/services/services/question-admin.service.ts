/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createQuestion } from '../fn/question-admin/create-question';
import { CreateQuestion$Params } from '../fn/question-admin/create-question';
import { deleteQuestion } from '../fn/question-admin/delete-question';
import { DeleteQuestion$Params } from '../fn/question-admin/delete-question';
import { getQuestionById } from '../fn/question-admin/get-question-by-id';
import { GetQuestionById$Params } from '../fn/question-admin/get-question-by-id';
import { getQuestionsByTestTemplate } from '../fn/question-admin/get-questions-by-test-template';
import { GetQuestionsByTestTemplate$Params } from '../fn/question-admin/get-questions-by-test-template';
import { moveQuestionDown } from '../fn/question-admin/move-question-down';
import { MoveQuestionDown$Params } from '../fn/question-admin/move-question-down';
import { moveQuestionUp } from '../fn/question-admin/move-question-up';
import { MoveQuestionUp$Params } from '../fn/question-admin/move-question-up';
import { QuestionResponse } from '../models/question-response';
import { reorderQuestions } from '../fn/question-admin/reorder-questions';
import { ReorderQuestions$Params } from '../fn/question-admin/reorder-questions';
import { updateQuestion } from '../fn/question-admin/update-question';
import { UpdateQuestion$Params } from '../fn/question-admin/update-question';


/**
 * Admin endpoints for managing test template questions
 */
@Injectable({ providedIn: 'root' })
export class QuestionAdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getQuestionById()` */
  static readonly GetQuestionByIdPath = '/v2/admin/questions/{id}';

  /**
   * Get question by ID.
   *
   * Get a specific question by its ID
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQuestionById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionById$Response(params: GetQuestionById$Params, context?: HttpContext): Observable<StrictHttpResponse<QuestionResponse>> {
    return getQuestionById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get question by ID.
   *
   * Get a specific question by its ID
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQuestionById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionById(params: GetQuestionById$Params, context?: HttpContext): Observable<QuestionResponse> {
    return this.getQuestionById$Response(params, context).pipe(
      map((r: StrictHttpResponse<QuestionResponse>): QuestionResponse => r.body)
    );
  }

  /** Path part for operation `updateQuestion()` */
  static readonly UpdateQuestionPath = '/v2/admin/questions/{id}';

  /**
   * Update question.
   *
   * Update an existing question
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion$Response(params: UpdateQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<QuestionResponse>> {
    return updateQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * Update question.
   *
   * Update an existing question
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateQuestion(params: UpdateQuestion$Params, context?: HttpContext): Observable<QuestionResponse> {
    return this.updateQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<QuestionResponse>): QuestionResponse => r.body)
    );
  }

  /** Path part for operation `deleteQuestion()` */
  static readonly DeleteQuestionPath = '/v2/admin/questions/{id}';

  /**
   * Delete question.
   *
   * Delete a question and reorder remaining questions
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteQuestion()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion$Response(params: DeleteQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete question.
   *
   * Delete a question and reorder remaining questions
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteQuestion$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteQuestion(params: DeleteQuestion$Params, context?: HttpContext): Observable<void> {
    return this.deleteQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `createQuestion()` */
  static readonly CreateQuestionPath = '/v2/admin/questions';

  /**
   * Create a new question.
   *
   * Create a question for a test template
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createQuestion()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuestion$Response(params: CreateQuestion$Params, context?: HttpContext): Observable<StrictHttpResponse<QuestionResponse>> {
    return createQuestion(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new question.
   *
   * Create a question for a test template
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createQuestion$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createQuestion(params: CreateQuestion$Params, context?: HttpContext): Observable<QuestionResponse> {
    return this.createQuestion$Response(params, context).pipe(
      map((r: StrictHttpResponse<QuestionResponse>): QuestionResponse => r.body)
    );
  }

  /** Path part for operation `moveQuestionUp()` */
  static readonly MoveQuestionUpPath = '/v2/admin/questions/{id}/move-up';

  /**
   * Move question up.
   *
   * Move question up in the order
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moveQuestionUp()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveQuestionUp$Response(params: MoveQuestionUp$Params, context?: HttpContext): Observable<StrictHttpResponse<QuestionResponse>> {
    return moveQuestionUp(this.http, this.rootUrl, params, context);
  }

  /**
   * Move question up.
   *
   * Move question up in the order
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moveQuestionUp$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveQuestionUp(params: MoveQuestionUp$Params, context?: HttpContext): Observable<QuestionResponse> {
    return this.moveQuestionUp$Response(params, context).pipe(
      map((r: StrictHttpResponse<QuestionResponse>): QuestionResponse => r.body)
    );
  }

  /** Path part for operation `moveQuestionDown()` */
  static readonly MoveQuestionDownPath = '/v2/admin/questions/{id}/move-down';

  /**
   * Move question down.
   *
   * Move question down in the order
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `moveQuestionDown()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveQuestionDown$Response(params: MoveQuestionDown$Params, context?: HttpContext): Observable<StrictHttpResponse<QuestionResponse>> {
    return moveQuestionDown(this.http, this.rootUrl, params, context);
  }

  /**
   * Move question down.
   *
   * Move question down in the order
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `moveQuestionDown$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  moveQuestionDown(params: MoveQuestionDown$Params, context?: HttpContext): Observable<QuestionResponse> {
    return this.moveQuestionDown$Response(params, context).pipe(
      map((r: StrictHttpResponse<QuestionResponse>): QuestionResponse => r.body)
    );
  }

  /** Path part for operation `reorderQuestions()` */
  static readonly ReorderQuestionsPath = '/v2/admin/questions/test-template/{testTemplateId}/reorder';

  /**
   * Reorder questions.
   *
   * Reorder all questions for a test template
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `reorderQuestions()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  reorderQuestions$Response(params: ReorderQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return reorderQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * Reorder questions.
   *
   * Reorder all questions for a test template
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `reorderQuestions$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  reorderQuestions(params: ReorderQuestions$Params, context?: HttpContext): Observable<void> {
    return this.reorderQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getQuestionsByTestTemplate()` */
  static readonly GetQuestionsByTestTemplatePath = '/v2/admin/questions/test-template/{testTemplateId}';

  /**
   * Get questions by test template.
   *
   * Get all questions for a specific test template ordered by order index
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getQuestionsByTestTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionsByTestTemplate$Response(params: GetQuestionsByTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<QuestionResponse>>> {
    return getQuestionsByTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Get questions by test template.
   *
   * Get all questions for a specific test template ordered by order index
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getQuestionsByTestTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getQuestionsByTestTemplate(params: GetQuestionsByTestTemplate$Params, context?: HttpContext): Observable<Array<QuestionResponse>> {
    return this.getQuestionsByTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<QuestionResponse>>): Array<QuestionResponse> => r.body)
    );
  }

}

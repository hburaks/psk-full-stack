/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {cancelUserSession, CancelUserSession$Params} from '../fn/session-controller/cancel-user-session';
import {
  createSessionForUserV21,
  CreateSessionForUserV21$Params
} from '../fn/session-controller/create-session-for-user-v-21';
import {getAllSessionsWeekly, GetAllSessionsWeekly$Params} from '../fn/session-controller/get-all-sessions-weekly';
import {getMySessions, GetMySessions$Params} from '../fn/session-controller/get-my-sessions';
import {PublicSessionResponse} from '../models/public-session-response';
import {SessionResponse} from '../models/session-response';

@Injectable({providedIn: 'root'})
export class SessionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `cancelUserSession()` */
  static readonly CancelUserSessionPath = '/sessions/{id}/cancel';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cancelUserSession()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelUserSession$Response(params: CancelUserSession$Params, context?: HttpContext): Observable<StrictHttpResponse<boolean>> {
    return cancelUserSession(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cancelUserSession$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cancelUserSession(params: CancelUserSession$Params, context?: HttpContext): Observable<boolean> {
    return this.cancelUserSession$Response(params, context).pipe(
      map((r: StrictHttpResponse<boolean>): boolean => r.body)
    );
  }

  /** Path part for operation `createSessionForUserV21()` */
  static readonly CreateSessionForUserV21Path = '/sessions/create';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createSessionForUserV21()` instead.
   *
   * This method doesn't expect any request body.
   */
  createSessionForUserV21$Response(params: CreateSessionForUserV21$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createSessionForUserV21(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createSessionForUserV21$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  createSessionForUserV21(params: CreateSessionForUserV21$Params, context?: HttpContext): Observable<number> {
    return this.createSessionForUserV21$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllSessionsWeekly()` */
  static readonly GetAllSessionsWeeklyPath = '/sessions/weekly';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllSessionsWeekly()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsWeekly$Response(params: GetAllSessionsWeekly$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PublicSessionResponse>>> {
    return getAllSessionsWeekly(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllSessionsWeekly$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllSessionsWeekly(params: GetAllSessionsWeekly$Params, context?: HttpContext): Observable<Array<PublicSessionResponse>> {
    return this.getAllSessionsWeekly$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PublicSessionResponse>>): Array<PublicSessionResponse> => r.body)
    );
  }

  /** Path part for operation `getMySessions()` */
  static readonly GetMySessionsPath = '/sessions/my-sessions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMySessions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMySessions$Response(params?: GetMySessions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SessionResponse>>> {
    return getMySessions(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMySessions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMySessions(params?: GetMySessions$Params, context?: HttpContext): Observable<Array<SessionResponse>> {
    return this.getMySessions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SessionResponse>>): Array<SessionResponse> => r.body)
    );
  }

}

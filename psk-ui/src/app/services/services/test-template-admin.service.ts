/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTestTemplate } from '../fn/test-template-admin/create-test-template';
import { CreateTestTemplate$Params } from '../fn/test-template-admin/create-test-template';
import { deleteTestTemplate } from '../fn/test-template-admin/delete-test-template';
import { DeleteTestTemplate$Params } from '../fn/test-template-admin/delete-test-template';
import { getAllTestTemplates } from '../fn/test-template-admin/get-all-test-templates';
import { GetAllTestTemplates$Params } from '../fn/test-template-admin/get-all-test-templates';
import { getTestTemplateById } from '../fn/test-template-admin/get-test-template-by-id';
import { GetTestTemplateById$Params } from '../fn/test-template-admin/get-test-template-by-id';
import { getTestTemplateQuestions } from '../fn/test-template-admin/get-test-template-questions';
import { GetTestTemplateQuestions$Params } from '../fn/test-template-admin/get-test-template-questions';
import { QuestionResponse } from '../models/question-response';
import { TestTemplateResponse } from '../models/test-template-response';
import { updateTestTemplate } from '../fn/test-template-admin/update-test-template';
import { UpdateTestTemplate$Params } from '../fn/test-template-admin/update-test-template';


/**
 * Admin endpoints for managing test templates
 */
@Injectable({ providedIn: 'root' })
export class TestTemplateAdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTestTemplateById()` */
  static readonly GetTestTemplateByIdPath = '/v2/admin/test-templates/{id}';

  /**
   * Get test template by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTestTemplateById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateById$Response(params: GetTestTemplateById$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return getTestTemplateById(this.http, this.rootUrl, params, context);
  }

  /**
   * Get test template by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTestTemplateById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateById(params: GetTestTemplateById$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.getTestTemplateById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `updateTestTemplate()` */
  static readonly UpdateTestTemplatePath = '/v2/admin/test-templates/{id}';

  /**
   * Update test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTestTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTestTemplate$Response(params: UpdateTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return updateTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTestTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTestTemplate(params: UpdateTestTemplate$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.updateTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `deleteTestTemplate()` */
  static readonly DeleteTestTemplatePath = '/v2/admin/test-templates/{id}';

  /**
   * Delete test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTestTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTestTemplate$Response(params: DeleteTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTestTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTestTemplate(params: DeleteTestTemplate$Params, context?: HttpContext): Observable<void> {
    return this.deleteTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllTestTemplates()` */
  static readonly GetAllTestTemplatesPath = '/v2/admin/test-templates';

  /**
   * Get all test templates.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTestTemplates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTestTemplates$Response(params?: GetAllTestTemplates$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TestTemplateResponse>>> {
    return getAllTestTemplates(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all test templates.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTestTemplates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTestTemplates(params?: GetAllTestTemplates$Params, context?: HttpContext): Observable<Array<TestTemplateResponse>> {
    return this.getAllTestTemplates$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TestTemplateResponse>>): Array<TestTemplateResponse> => r.body)
    );
  }

  /** Path part for operation `createTestTemplate()` */
  static readonly CreateTestTemplatePath = '/v2/admin/test-templates';

  /**
   * Create a new test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTestTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTestTemplate$Response(params: CreateTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return createTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTestTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTestTemplate(params: CreateTestTemplate$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.createTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `getTestTemplateQuestions()` */
  static readonly GetTestTemplateQuestionsPath = '/v2/admin/test-templates/{id}/questions';

  /**
   * Get test template questions.
   *
   * Get all questions for a test template ordered by order index
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTestTemplateQuestions()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateQuestions$Response(params: GetTestTemplateQuestions$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<QuestionResponse>>> {
    return getTestTemplateQuestions(this.http, this.rootUrl, params, context);
  }

  /**
   * Get test template questions.
   *
   * Get all questions for a test template ordered by order index
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTestTemplateQuestions$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateQuestions(params: GetTestTemplateQuestions$Params, context?: HttpContext): Observable<Array<QuestionResponse>> {
    return this.getTestTemplateQuestions$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<QuestionResponse>>): Array<QuestionResponse> => r.body)
    );
  }

}

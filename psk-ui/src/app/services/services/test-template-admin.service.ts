/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import {HttpClient, HttpContext} from '@angular/common/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs';
import {map} from 'rxjs/operators';

import {BaseService} from '../base-service';
import {ApiConfiguration} from '../api-configuration';
import {StrictHttpResponse} from '../strict-http-response';

import {createTestTemplate, CreateTestTemplate$Params} from '../fn/test-template-admin/create-test-template';
import {deleteTestTemplate, DeleteTestTemplate$Params} from '../fn/test-template-admin/delete-test-template';
import {getAllTestTemplates, GetAllTestTemplates$Params} from '../fn/test-template-admin/get-all-test-templates';
import {
  getAvailableTestTemplatesForUser,
  GetAvailableTestTemplatesForUser$Params
} from '../fn/test-template-admin/get-available-test-templates-for-user';
import {getTestTemplateById1, GetTestTemplateById1$Params} from '../fn/test-template-admin/get-test-template-by-id-1';
import {
  getTestTemplateQuestions1,
  GetTestTemplateQuestions1$Params
} from '../fn/test-template-admin/get-test-template-questions-1';
import {QuestionResponse} from '../models/question-response';
import {TestTemplateResponse} from '../models/test-template-response';
import {updateTestTemplate, UpdateTestTemplate$Params} from '../fn/test-template-admin/update-test-template';
import {uploadImage, UploadImage$Params} from '../fn/test-template-admin/upload-image';


/**
 * Admin endpoints for managing test templates
 */
@Injectable({ providedIn: 'root' })
export class TestTemplateAdminService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTestTemplateById1()` */
  static readonly GetTestTemplateById1Path = '/v2/admin/test-templates/{id}';

  /**
   * Get test template by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTestTemplateById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateById1$Response(params: GetTestTemplateById1$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return getTestTemplateById1(this.http, this.rootUrl, params, context);
  }

  /**
   * Get test template by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTestTemplateById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateById1(params: GetTestTemplateById1$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.getTestTemplateById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `updateTestTemplate()` */
  static readonly UpdateTestTemplatePath = '/v2/admin/test-templates/{id}';

  /**
   * Update test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTestTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTestTemplate$Response(params: UpdateTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return updateTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Update test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTestTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateTestTemplate(params: UpdateTestTemplate$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.updateTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `deleteTestTemplate()` */
  static readonly DeleteTestTemplatePath = '/v2/admin/test-templates/{id}';

  /**
   * Delete test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTestTemplate()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTestTemplate$Response(params: DeleteTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTestTemplate$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTestTemplate(params: DeleteTestTemplate$Params, context?: HttpContext): Observable<void> {
    return this.deleteTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllTestTemplates()` */
  static readonly GetAllTestTemplatesPath = '/v2/admin/test-templates';

  /**
   * Get all test templates.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllTestTemplates()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTestTemplates$Response(params?: GetAllTestTemplates$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TestTemplateResponse>>> {
    return getAllTestTemplates(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all test templates.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllTestTemplates$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllTestTemplates(params?: GetAllTestTemplates$Params, context?: HttpContext): Observable<Array<TestTemplateResponse>> {
    return this.getAllTestTemplates$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TestTemplateResponse>>): Array<TestTemplateResponse> => r.body)
    );
  }

  /** Path part for operation `createTestTemplate()` */
  static readonly CreateTestTemplatePath = '/v2/admin/test-templates';

  /**
   * Create a new test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTestTemplate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTestTemplate$Response(params: CreateTestTemplate$Params, context?: HttpContext): Observable<StrictHttpResponse<TestTemplateResponse>> {
    return createTestTemplate(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTestTemplate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTestTemplate(params: CreateTestTemplate$Params, context?: HttpContext): Observable<TestTemplateResponse> {
    return this.createTestTemplate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TestTemplateResponse>): TestTemplateResponse => r.body)
    );
  }

  /** Path part for operation `uploadImage()` */
  static readonly UploadImagePath = '/v2/admin/test-templates/upload-image';

  /**
   * Upload image for test template.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadImage()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadImage$Response(params: UploadImage$Params, context?: HttpContext): Observable<StrictHttpResponse<'100 CONTINUE' | '101 SWITCHING_PROTOCOLS' | '102 PROCESSING' | '103 EARLY_HINTS' | '103 CHECKPOINT' | '200 OK' | '201 CREATED' | '202 ACCEPTED' | '203 NON_AUTHORITATIVE_INFORMATION' | '204 NO_CONTENT' | '205 RESET_CONTENT' | '206 PARTIAL_CONTENT' | '207 MULTI_STATUS' | '208 ALREADY_REPORTED' | '226 IM_USED' | '300 MULTIPLE_CHOICES' | '301 MOVED_PERMANENTLY' | '302 FOUND' | '302 MOVED_TEMPORARILY' | '303 SEE_OTHER' | '304 NOT_MODIFIED' | '305 USE_PROXY' | '307 TEMPORARY_REDIRECT' | '308 PERMANENT_REDIRECT' | '400 BAD_REQUEST' | '401 UNAUTHORIZED' | '402 PAYMENT_REQUIRED' | '403 FORBIDDEN' | '404 NOT_FOUND' | '405 METHOD_NOT_ALLOWED' | '406 NOT_ACCEPTABLE' | '407 PROXY_AUTHENTICATION_REQUIRED' | '408 REQUEST_TIMEOUT' | '409 CONFLICT' | '410 GONE' | '411 LENGTH_REQUIRED' | '412 PRECONDITION_FAILED' | '413 PAYLOAD_TOO_LARGE' | '413 REQUEST_ENTITY_TOO_LARGE' | '414 URI_TOO_LONG' | '414 REQUEST_URI_TOO_LONG' | '415 UNSUPPORTED_MEDIA_TYPE' | '416 REQUESTED_RANGE_NOT_SATISFIABLE' | '417 EXPECTATION_FAILED' | '418 I_AM_A_TEAPOT' | '419 INSUFFICIENT_SPACE_ON_RESOURCE' | '420 METHOD_FAILURE' | '421 DESTINATION_LOCKED' | '422 UNPROCESSABLE_ENTITY' | '423 LOCKED' | '424 FAILED_DEPENDENCY' | '425 TOO_EARLY' | '426 UPGRADE_REQUIRED' | '428 PRECONDITION_REQUIRED' | '429 TOO_MANY_REQUESTS' | '431 REQUEST_HEADER_FIELDS_TOO_LARGE' | '451 UNAVAILABLE_FOR_LEGAL_REASONS' | '500 INTERNAL_SERVER_ERROR' | '501 NOT_IMPLEMENTED' | '502 BAD_GATEWAY' | '503 SERVICE_UNAVAILABLE' | '504 GATEWAY_TIMEOUT' | '505 HTTP_VERSION_NOT_SUPPORTED' | '506 VARIANT_ALSO_NEGOTIATES' | '507 INSUFFICIENT_STORAGE' | '508 LOOP_DETECTED' | '509 BANDWIDTH_LIMIT_EXCEEDED' | '510 NOT_EXTENDED' | '511 NETWORK_AUTHENTICATION_REQUIRED'>> {
    return uploadImage(this.http, this.rootUrl, params, context);
  }

  /**
   * Upload image for test template.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadImage$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadImage(params: UploadImage$Params, context?: HttpContext): Observable<'100 CONTINUE' | '101 SWITCHING_PROTOCOLS' | '102 PROCESSING' | '103 EARLY_HINTS' | '103 CHECKPOINT' | '200 OK' | '201 CREATED' | '202 ACCEPTED' | '203 NON_AUTHORITATIVE_INFORMATION' | '204 NO_CONTENT' | '205 RESET_CONTENT' | '206 PARTIAL_CONTENT' | '207 MULTI_STATUS' | '208 ALREADY_REPORTED' | '226 IM_USED' | '300 MULTIPLE_CHOICES' | '301 MOVED_PERMANENTLY' | '302 FOUND' | '302 MOVED_TEMPORARILY' | '303 SEE_OTHER' | '304 NOT_MODIFIED' | '305 USE_PROXY' | '307 TEMPORARY_REDIRECT' | '308 PERMANENT_REDIRECT' | '400 BAD_REQUEST' | '401 UNAUTHORIZED' | '402 PAYMENT_REQUIRED' | '403 FORBIDDEN' | '404 NOT_FOUND' | '405 METHOD_NOT_ALLOWED' | '406 NOT_ACCEPTABLE' | '407 PROXY_AUTHENTICATION_REQUIRED' | '408 REQUEST_TIMEOUT' | '409 CONFLICT' | '410 GONE' | '411 LENGTH_REQUIRED' | '412 PRECONDITION_FAILED' | '413 PAYLOAD_TOO_LARGE' | '413 REQUEST_ENTITY_TOO_LARGE' | '414 URI_TOO_LONG' | '414 REQUEST_URI_TOO_LONG' | '415 UNSUPPORTED_MEDIA_TYPE' | '416 REQUESTED_RANGE_NOT_SATISFIABLE' | '417 EXPECTATION_FAILED' | '418 I_AM_A_TEAPOT' | '419 INSUFFICIENT_SPACE_ON_RESOURCE' | '420 METHOD_FAILURE' | '421 DESTINATION_LOCKED' | '422 UNPROCESSABLE_ENTITY' | '423 LOCKED' | '424 FAILED_DEPENDENCY' | '425 TOO_EARLY' | '426 UPGRADE_REQUIRED' | '428 PRECONDITION_REQUIRED' | '429 TOO_MANY_REQUESTS' | '431 REQUEST_HEADER_FIELDS_TOO_LARGE' | '451 UNAVAILABLE_FOR_LEGAL_REASONS' | '500 INTERNAL_SERVER_ERROR' | '501 NOT_IMPLEMENTED' | '502 BAD_GATEWAY' | '503 SERVICE_UNAVAILABLE' | '504 GATEWAY_TIMEOUT' | '505 HTTP_VERSION_NOT_SUPPORTED' | '506 VARIANT_ALSO_NEGOTIATES' | '507 INSUFFICIENT_STORAGE' | '508 LOOP_DETECTED' | '509 BANDWIDTH_LIMIT_EXCEEDED' | '510 NOT_EXTENDED' | '511 NETWORK_AUTHENTICATION_REQUIRED'> {
    return this.uploadImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<'100 CONTINUE' | '101 SWITCHING_PROTOCOLS' | '102 PROCESSING' | '103 EARLY_HINTS' | '103 CHECKPOINT' | '200 OK' | '201 CREATED' | '202 ACCEPTED' | '203 NON_AUTHORITATIVE_INFORMATION' | '204 NO_CONTENT' | '205 RESET_CONTENT' | '206 PARTIAL_CONTENT' | '207 MULTI_STATUS' | '208 ALREADY_REPORTED' | '226 IM_USED' | '300 MULTIPLE_CHOICES' | '301 MOVED_PERMANENTLY' | '302 FOUND' | '302 MOVED_TEMPORARILY' | '303 SEE_OTHER' | '304 NOT_MODIFIED' | '305 USE_PROXY' | '307 TEMPORARY_REDIRECT' | '308 PERMANENT_REDIRECT' | '400 BAD_REQUEST' | '401 UNAUTHORIZED' | '402 PAYMENT_REQUIRED' | '403 FORBIDDEN' | '404 NOT_FOUND' | '405 METHOD_NOT_ALLOWED' | '406 NOT_ACCEPTABLE' | '407 PROXY_AUTHENTICATION_REQUIRED' | '408 REQUEST_TIMEOUT' | '409 CONFLICT' | '410 GONE' | '411 LENGTH_REQUIRED' | '412 PRECONDITION_FAILED' | '413 PAYLOAD_TOO_LARGE' | '413 REQUEST_ENTITY_TOO_LARGE' | '414 URI_TOO_LONG' | '414 REQUEST_URI_TOO_LONG' | '415 UNSUPPORTED_MEDIA_TYPE' | '416 REQUESTED_RANGE_NOT_SATISFIABLE' | '417 EXPECTATION_FAILED' | '418 I_AM_A_TEAPOT' | '419 INSUFFICIENT_SPACE_ON_RESOURCE' | '420 METHOD_FAILURE' | '421 DESTINATION_LOCKED' | '422 UNPROCESSABLE_ENTITY' | '423 LOCKED' | '424 FAILED_DEPENDENCY' | '425 TOO_EARLY' | '426 UPGRADE_REQUIRED' | '428 PRECONDITION_REQUIRED' | '429 TOO_MANY_REQUESTS' | '431 REQUEST_HEADER_FIELDS_TOO_LARGE' | '451 UNAVAILABLE_FOR_LEGAL_REASONS' | '500 INTERNAL_SERVER_ERROR' | '501 NOT_IMPLEMENTED' | '502 BAD_GATEWAY' | '503 SERVICE_UNAVAILABLE' | '504 GATEWAY_TIMEOUT' | '505 HTTP_VERSION_NOT_SUPPORTED' | '506 VARIANT_ALSO_NEGOTIATES' | '507 INSUFFICIENT_STORAGE' | '508 LOOP_DETECTED' | '509 BANDWIDTH_LIMIT_EXCEEDED' | '510 NOT_EXTENDED' | '511 NETWORK_AUTHENTICATION_REQUIRED'>): '100 CONTINUE' | '101 SWITCHING_PROTOCOLS' | '102 PROCESSING' | '103 EARLY_HINTS' | '103 CHECKPOINT' | '200 OK' | '201 CREATED' | '202 ACCEPTED' | '203 NON_AUTHORITATIVE_INFORMATION' | '204 NO_CONTENT' | '205 RESET_CONTENT' | '206 PARTIAL_CONTENT' | '207 MULTI_STATUS' | '208 ALREADY_REPORTED' | '226 IM_USED' | '300 MULTIPLE_CHOICES' | '301 MOVED_PERMANENTLY' | '302 FOUND' | '302 MOVED_TEMPORARILY' | '303 SEE_OTHER' | '304 NOT_MODIFIED' | '305 USE_PROXY' | '307 TEMPORARY_REDIRECT' | '308 PERMANENT_REDIRECT' | '400 BAD_REQUEST' | '401 UNAUTHORIZED' | '402 PAYMENT_REQUIRED' | '403 FORBIDDEN' | '404 NOT_FOUND' | '405 METHOD_NOT_ALLOWED' | '406 NOT_ACCEPTABLE' | '407 PROXY_AUTHENTICATION_REQUIRED' | '408 REQUEST_TIMEOUT' | '409 CONFLICT' | '410 GONE' | '411 LENGTH_REQUIRED' | '412 PRECONDITION_FAILED' | '413 PAYLOAD_TOO_LARGE' | '413 REQUEST_ENTITY_TOO_LARGE' | '414 URI_TOO_LONG' | '414 REQUEST_URI_TOO_LONG' | '415 UNSUPPORTED_MEDIA_TYPE' | '416 REQUESTED_RANGE_NOT_SATISFIABLE' | '417 EXPECTATION_FAILED' | '418 I_AM_A_TEAPOT' | '419 INSUFFICIENT_SPACE_ON_RESOURCE' | '420 METHOD_FAILURE' | '421 DESTINATION_LOCKED' | '422 UNPROCESSABLE_ENTITY' | '423 LOCKED' | '424 FAILED_DEPENDENCY' | '425 TOO_EARLY' | '426 UPGRADE_REQUIRED' | '428 PRECONDITION_REQUIRED' | '429 TOO_MANY_REQUESTS' | '431 REQUEST_HEADER_FIELDS_TOO_LARGE' | '451 UNAVAILABLE_FOR_LEGAL_REASONS' | '500 INTERNAL_SERVER_ERROR' | '501 NOT_IMPLEMENTED' | '502 BAD_GATEWAY' | '503 SERVICE_UNAVAILABLE' | '504 GATEWAY_TIMEOUT' | '505 HTTP_VERSION_NOT_SUPPORTED' | '506 VARIANT_ALSO_NEGOTIATES' | '507 INSUFFICIENT_STORAGE' | '508 LOOP_DETECTED' | '509 BANDWIDTH_LIMIT_EXCEEDED' | '510 NOT_EXTENDED' | '511 NETWORK_AUTHENTICATION_REQUIRED' => r.body)
    );
  }

  /** Path part for operation `getTestTemplateQuestions1()` */
  static readonly GetTestTemplateQuestions1Path = '/v2/admin/test-templates/{id}/questions';

  /**
   * Get test template questions.
   *
   * Get all questions for a test template ordered by order index
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTestTemplateQuestions1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateQuestions1$Response(params: GetTestTemplateQuestions1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<QuestionResponse>>> {
    return getTestTemplateQuestions1(this.http, this.rootUrl, params, context);
  }

  /**
   * Get test template questions.
   *
   * Get all questions for a test template ordered by order index
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTestTemplateQuestions1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTestTemplateQuestions1(params: GetTestTemplateQuestions1$Params, context?: HttpContext): Observable<Array<QuestionResponse>> {
    return this.getTestTemplateQuestions1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<QuestionResponse>>): Array<QuestionResponse> => r.body)
    );
  }

  /** Path part for operation `getAvailableTestTemplatesForUser()` */
  static readonly GetAvailableTestTemplatesForUserPath = '/v2/admin/test-templates/available-for-user/{userId}';

  /**
   * Get available test templates for user.
   *
   * Get test templates that are not yet assigned to the specified user
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvailableTestTemplatesForUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableTestTemplatesForUser$Response(params: GetAvailableTestTemplatesForUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TestTemplateResponse>>> {
    return getAvailableTestTemplatesForUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Get available test templates for user.
   *
   * Get test templates that are not yet assigned to the specified user
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvailableTestTemplatesForUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvailableTestTemplatesForUser(params: GetAvailableTestTemplatesForUser$Params, context?: HttpContext): Observable<Array<TestTemplateResponse>> {
    return this.getAvailableTestTemplatesForUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TestTemplateResponse>>): Array<TestTemplateResponse> => r.body)
    );
  }

}

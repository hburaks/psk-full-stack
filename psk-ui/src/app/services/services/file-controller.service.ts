/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { downloadBlogFile } from '../fn/file-controller/download-blog-file';
import { DownloadBlogFile$Params } from '../fn/file-controller/download-blog-file';
import { downloadCommentImage } from '../fn/file-controller/download-comment-image';
import { DownloadCommentImage$Params } from '../fn/file-controller/download-comment-image';
import { downloadTestFile } from '../fn/file-controller/download-test-file';
import { DownloadTestFile$Params } from '../fn/file-controller/download-test-file';

@Injectable({ providedIn: 'root' })
export class FileControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `downloadTestFile()` */
  static readonly DownloadTestFilePath = '/v3/files/test/download/{fileName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadTestFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadTestFile$Response(params: DownloadTestFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadTestFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadTestFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadTestFile(params: DownloadTestFile$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadTestFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `downloadCommentImage()` */
  static readonly DownloadCommentImagePath = '/v3/files/comment/download/{fileName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadCommentImage()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadCommentImage$Response(params: DownloadCommentImage$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadCommentImage(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadCommentImage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadCommentImage(params: DownloadCommentImage$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadCommentImage$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

  /** Path part for operation `downloadBlogFile()` */
  static readonly DownloadBlogFilePath = '/v3/files/blog/download/{fileName}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `downloadBlogFile()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadBlogFile$Response(params: DownloadBlogFile$Params, context?: HttpContext): Observable<StrictHttpResponse<Blob>> {
    return downloadBlogFile(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `downloadBlogFile$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  downloadBlogFile(params: DownloadBlogFile$Params, context?: HttpContext): Observable<Blob> {
    return this.downloadBlogFile$Response(params, context).pipe(
      map((r: StrictHttpResponse<Blob>): Blob => r.body)
    );
  }

}
